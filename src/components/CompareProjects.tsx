import React, { useState, useEffect } from 'react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import html2canvas from 'html2canvas';;

import { 
  GitCompare, 
  Plus, 
  X, 
  TrendingUp, 
  TrendingDown, 
  Minus,
  BarChart3,
  Zap,
  Droplets,
  Recycle,
  Award,
  AlertCircle
} from 'lucide-react';
import { Bar, Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  RadarController,
  BarController,
  RadialLinearScale,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

// Register all required components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  RadarController,
  BarController,
  RadialLinearScale,
  Title,
  Tooltip,
  Legend
);

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
}

interface Project {
  projectId: string;
  projectName: string;
  sustainabilityScore: number;
  circularScore: number;
  linearScore: number;
  timestamp: string;
  overallData: any;
  stages: any[];
}

interface ComparisonProject {
  projectId: string;
  projectName: string;
  sustainabilityScore: number;
  circularScore: number;
  linearScore: number;
  totalEnergy: number;
  totalWater: number;
  totalWaste: number;
  stageCount: number;
}

interface CompareProjectsProps {
  user: User;
}

const CompareProjects: React.FC<CompareProjectsProps> = ({ user }) => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProjects, setSelectedProjects] = useState<string[]>([]);
  const [comparisonData, setComparisonData] = useState<{
    projects: ComparisonProject[];
    summary: any;
  } | null>(null);
  const [loading, setLoading] = useState(true);
  const [comparing, setComparing] = useState(false);

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      const token = localStorage.getItem('lca_token');
      const response = await fetch('http://localhost:5000/api/process/all', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setProjects(data);
      }
    } catch (error) {
      console.error('Error fetching projects:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleProjectSelection = (projectId: string) => {
    if (selectedProjects.includes(projectId)) {
      setSelectedProjects(selectedProjects.filter(id => id !== projectId));
    } else if (selectedProjects.length < 5) { // Limit to 5 projects for readability
      setSelectedProjects([...selectedProjects, projectId]);
    }
  };

const downloadPDF = async () => {
  const input = document.getElementById('comparison-section');
  if (!input) return;

  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();

  const canvas = await html2canvas(input, { scale: 2, useCORS: true });
  const imgData = canvas.toDataURL('image/png');

  const imgProps = pdf.getImageProperties(imgData);
  const pdfWidth = pageWidth - 20; // margins
  const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

  if (pdfHeight < pageHeight) {
    pdf.addImage(imgData, 'PNG', 10, 10, pdfWidth, pdfHeight);
  } else {
    // Handle multiple pages
    let heightLeft = pdfHeight;
    let position = 10;

    while (heightLeft > 0) {
      pdf.addImage(imgData, 'PNG', 10, position, pdfWidth, pdfHeight);
      heightLeft -= pageHeight;
      if (heightLeft > 0) pdf.addPage();
      position = heightLeft - pdfHeight;
    }
  }

  // Footer
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(10);
    pdf.text(`Generated by: ${user.name}`, 10, pageHeight - 10);
    pdf.text(`Timestamp: ${new Date().toLocaleString()}`, pageWidth - 80, pageHeight - 10);
  }

  pdf.save('project_comparison.pdf');
};


  const compareProjects = async () => {
    if (selectedProjects.length < 2) return;

    setComparing(true);
    try {
      const token = localStorage.getItem('lca_token');
      const response = await fetch('http://localhost:5000/api/process/compare', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          projectIds: selectedProjects
        })
      });

      if (response.ok) {
        const data = await response.json();
        setComparisonData(data);
      }
    } catch (error) {
      console.error('Error comparing projects:', error);
    } finally {
      setComparing(false);
    }
  };

  const clearSelection = () => {
    setSelectedProjects([]);
    setComparisonData(null);
  };

  // Chart data preparation
  const barChartData = comparisonData ? {
    labels: comparisonData.projects.map(p => p.projectName),
    datasets: [
      {
        label: 'Sustainability Score',
        data: comparisonData.projects.map(p => p.sustainabilityScore),
        backgroundColor: 'rgba(16, 185, 129, 0.8)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2
      },
      {
        label: 'Circular Score',
        data: comparisonData.projects.map(p => p.circularScore),
        backgroundColor: 'rgba(59, 130, 246, 0.8)',
        borderColor: 'rgba(59, 130, 246, 1)',
        borderWidth: 2
      },
      {
        label: 'Linear Score',
        data: comparisonData.projects.map(p => p.linearScore),
        backgroundColor: 'rgba(156, 163, 175, 0.8)',
        borderColor: 'rgba(156, 163, 175, 1)',
        borderWidth: 2
      }
    ]
  } : null;

  const resourceChartData = comparisonData ? {
    labels: comparisonData.projects.map(p => p.projectName),
    datasets: [
      {
        label: 'Total Energy (GJ)',
        data: comparisonData.projects.map(p => p.totalEnergy),
        backgroundColor: 'rgba(251, 146, 60, 0.8)',
        borderColor: 'rgba(251, 146, 60, 1)',
        borderWidth: 2,
        yAxisID: 'y'
      },
      {
        label: 'Total Water (mÂ³)',
        data: comparisonData.projects.map(p => p.totalWater),
        backgroundColor: 'rgba(14, 165, 233, 0.8)',
        borderColor: 'rgba(14, 165, 233, 1)',
        borderWidth: 2,
        yAxisID: 'y1'
      }
    ]
  } : null;

  const radarChartData = comparisonData ? {
    labels: ['Sustainability', 'Circular Economy', 'Energy Efficiency', 'Water Efficiency', 'Stage Optimization'],
    datasets: comparisonData.projects.slice(0, 3).map((project, index) => { // Limit to 3 for radar clarity
      const colors = [
        'rgba(16, 185, 129, 0.2)',
        'rgba(59, 130, 246, 0.2)',
        'rgba(251, 146, 60, 0.2)'
      ];
      const borderColors = [
        'rgba(16, 185, 129, 1)',
        'rgba(59, 130, 246, 1)',
        'rgba(251, 146, 60, 1)'
      ];
      
      return {
        label: project.projectName,
        data: [
          project.sustainabilityScore,
          project.circularScore,
          Math.max(0, 100 - (project.totalEnergy / 10)), // Normalized energy efficiency
          Math.max(0, 100 - (project.totalWater / 5)), // Normalized water efficiency
          Math.min(100, (project.stageCount * 15)) // Stage optimization score
        ],
        backgroundColor: colors[index],
        borderColor: borderColors[index],
        borderWidth: 2,
        pointBackgroundColor: borderColors[index]
      };
    })
  } : null;

  const getComparisonIcon = (current: number, best: number) => {
    if (current === best) {
      return <Award className="h-4 w-4 text-yellow-500" />;
    } else if (current > (best * 0.9)) {
      return <TrendingUp className="h-4 w-4 text-green-500" />;
    } else if (current > (best * 0.7)) {
      return <Minus className="h-4 w-4 text-yellow-500" />;
    } else {
      return <TrendingDown className="h-4 w-4 text-red-500" />;
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Compare Projects</h1>
        <p className="text-gray-600">
          Compare multiple LCA projects side-by-side to identify best practices and improvement opportunities
        </p>
      </div>

      {/* Project Selection */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-900">
            Select Projects to Compare ({selectedProjects.length}/5)
          </h2>
          <div className="flex gap-2">
            <button
              onClick={compareProjects}
              disabled={selectedProjects.length < 2 || comparing}
              className="flex items-center px-4 py-2 bg-green-600 text-white font-medium text-sm rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {comparing ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <GitCompare className="h-4 w-4 mr-2" />
              )}
              {comparing ? 'Comparing...' : 'Compare Selected'}
            </button>
            
            {selectedProjects.length > 0 && (
              <button
                onClick={clearSelection}
                className="flex items-center px-4 py-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="h-4 w-4 mr-2" />
                Clear All
              </button>
            )}
          </div>
        </div>

        {/* Project Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {projects.map((project) => (
            <div
              key={project.projectId}
              className={`relative border rounded-lg p-4 cursor-pointer transition-all ${
                selectedProjects.includes(project.projectId)
                  ? 'border-green-500 bg-green-50'
                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
              }`}
              onClick={() => toggleProjectSelection(project.projectId)}
            >
              {selectedProjects.includes(project.projectId) && (
                <div className="absolute top-2 right-2 bg-green-500 text-white rounded-full p-1">
                  <Plus className="h-3 w-3 transform rotate-45" />
                </div>
              )}
              
              <h3 className="font-medium text-gray-900 mb-2 pr-8">
                {project.projectName}
              </h3>
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Sustainability:</span>
                  <span className="font-medium text-green-600">{project.sustainabilityScore}%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Circular:</span>
                  <span className="font-medium text-blue-600">{project.circularScore}%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Stages:</span>
                  <span className="font-medium text-gray-700">{project.stages.length}</span>
                </div>
                <div className="text-xs text-gray-500">
                  {new Date(project.timestamp).toLocaleDateString()}
                </div>
              </div>
            </div>
          ))}
        </div>

        {projects.length === 0 && (
          <div className="text-center py-8">
            <BarChart3 className="h-12 w-12 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500">No projects available for comparison</p>
            <p className="text-sm text-gray-400">Create at least 2 projects to enable comparison</p>
          </div>
        )}
      </div>

      {/* Comparison Results */}
      {comparisonData && (
        <div id="comparison-section">
          {/* Summary Statistics */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Comparison Summary</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600 mb-2">
                  {comparisonData.summary.avgSustainabilityScore}%
                </div>
                <div className="text-sm text-gray-600">Average Sustainability Score</div>
              </div>
              
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-xl font-bold text-blue-600 mb-2">
                  {comparisonData.summary.bestProject.projectName}
                </div>
                <div className="text-sm text-gray-600">Best Performing Project</div>
                <div className="text-xs text-blue-500 mt-1">
                  {comparisonData.summary.bestProject.sustainabilityScore}% sustainability
                </div>
              </div>
              
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-xl font-bold text-orange-600 mb-2">
                  {comparisonData.summary.worstProject.projectName}
                </div>
                <div className="text-sm text-gray-600">Improvement Opportunity</div>
                <div className="text-xs text-orange-500 mt-1">
                  {comparisonData.summary.worstProject.sustainabilityScore}% sustainability
                </div>
              </div>
            </div>
          </div>

          {/* Detailed Comparison Table */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Detailed Comparison</h2>
            
            <div className="overflow-x-auto">
              <table className="w-full border border-gray-200 rounded-lg">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-700">Project</th>
                    <th className="px-4 py-3 text-center text-sm font-medium text-gray-700">Sustainability</th>
                    <th className="px-4 py-3 text-center text-sm font-medium text-gray-700">Circular</th>
                    <th className="px-4 py-3 text-center text-sm font-medium text-gray-700">Linear</th>
                    <th className="px-4 py-3 text-center text-sm font-medium text-gray-700">Energy (GJ)</th>
                    <th className="px-4 py-3 text-center text-sm font-medium text-gray-700">Water (mÂ³)</th>
                    <th className="px-4 py-3 text-center text-sm font-medium text-gray-700">Stages</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {comparisonData.projects.map((project, index) => {
                    const bestSustainability = Math.max(...comparisonData.projects.map(p => p.sustainabilityScore));
                    const bestCircular = Math.max(...comparisonData.projects.map(p => p.circularScore));
                    const bestLinear = Math.max(...comparisonData.projects.map(p => p.linearScore));
                    const minEnergy = Math.min(...comparisonData.projects.map(p => p.totalEnergy));
                    const minWater = Math.min(...comparisonData.projects.map(p => p.totalWater));
                    
                    return (
                      <tr key={project.projectId}>
                        <td className="px-4 py-3 font-medium text-gray-900">
                          {project.projectName}
                        </td>
                        <td className="px-4 py-3 text-center">
                          <div className="flex items-center justify-center">
                            {getComparisonIcon(project.sustainabilityScore, bestSustainability)}
                            <span className={`ml-2 font-medium ${
                              project.sustainabilityScore === bestSustainability ? 'text-green-600' : 'text-gray-700'
                            }`}>
                              {project.sustainabilityScore}%
                            </span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-center">
                          <div className="flex items-center justify-center">
                            {getComparisonIcon(project.circularScore, bestCircular)}
                            <span className={`ml-2 font-medium ${
                              project.circularScore === bestCircular ? 'text-blue-600' : 'text-gray-700'
                            }`}>
                              {project.circularScore}%
                            </span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-center">
                          <div className="flex items-center justify-center">
                            {getComparisonIcon(project.linearScore, bestLinear)}
                            <span className={`ml-2 font-medium ${
                              project.linearScore === bestLinear ? 'text-gray-600' : 'text-gray-700'
                            }`}>
                              {project.linearScore}%
                            </span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-center">
                          <div className="flex items-center justify-center">
                            <Zap className={`h-4 w-4 mr-2 ${
                              project.totalEnergy === minEnergy ? 'text-green-500' : 'text-orange-500'
                            }`} />
                            <span className={`font-medium ${
                              project.totalEnergy === minEnergy ? 'text-green-600' : 'text-gray-700'
                            }`}>
                              {project.totalEnergy.toFixed(1)}
                            </span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-center">
                          <div className="flex items-center justify-center">
                            <Droplets className={`h-4 w-4 mr-2 ${
                              project.totalWater === minWater ? 'text-green-500' : 'text-blue-500'
                            }`} />
                            <span className={`font-medium ${
                              project.totalWater === minWater ? 'text-green-600' : 'text-gray-700'
                            }`}>
                              {project.totalWater.toFixed(1)}
                            </span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-center text-gray-700 font-medium">
                          {project.stageCount}
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>

          {/* Charts Section */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
  {/* Score Comparison Chart */}
  <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 h-[400px]">
    <h3 className="text-lg font-semibold text-gray-900 mb-4">Score Comparison</h3>
    {barChartData && (
      <Bar
        data={barChartData}
        options={{
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: { beginAtZero: true, max: 100 }
          },
        }}
        className="h-full"
      />
    )}
  </div>

  {/* Resource Usage Chart */}
  <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 h-[400px]">
    <h3 className="text-lg font-semibold text-gray-900 mb-4">Resource Usage Comparison</h3>
    {resourceChartData && (
      <Bar
        data={resourceChartData}
        options={{
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: { type: 'linear', position: 'left' },
            y1: {
              type: 'linear',
              position: 'right',
              grid: { drawOnChartArea: false }
            }
          }
        }}
        className="h-full"
      />
    )}
  </div>
</div>

{/* Radar Chart */}
{radarChartData && comparisonData.projects.length <= 3 && (
  <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8 h-[500px]">
    <h3 className="text-lg font-semibold text-gray-900 mb-4">Multi-dimensional Performance</h3>
    <div className="flex justify-center items-center h-full">
      <div className="w-full max-w-xl h-full">
        <Radar
          data={radarChartData}
          options={{
            responsive: true,
            maintainAspectRatio: false,
            scales: { r: { beginAtZero: true, max: 100 } },
          }}
          className="h-full"
        />
      </div>
    </div>
  </div>
)}

            


          {/* Insights and Recommendations */}
          <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-xl shadow-lg p-6 text-white">
            <h2 className="text-xl font-bold mb-4">ð¯ Key Insights from Comparison</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-3">ð Best Practices</h3>
                <ul className="space-y-2 text-sm opacity-90">
                  <li>â¢ {comparisonData.summary.bestProject.projectName} shows optimal sustainability performance</li>
                  <li>â¢ Energy-efficient projects demonstrate 25-40% better scores</li>
                  <li>â¢ Circular economy adoption significantly improves overall performance</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-semibold mb-3">ð Improvement Opportunities</h3>
                <ul className="space-y-2 text-sm opacity-90">
                  <li>â¢ Focus on energy reduction in underperforming projects</li>
                  <li>â¢ Implement circular design principles across all stages</li>
                  <li>â¢ Consider material substitution and process optimization</li>
                </ul>
              </div>
              
            </div>
          </div>
        </div>
      )}
      

      <div className="mb-4 flex justify-center">
                  <button
                    onClick={downloadPDF}
                    className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                  >
                    Download PDF
                  </button>
                </div>

      {/* Instructions */}
      {!comparisonData && selectedProjects.length < 2 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <div className="flex items-start">
            <AlertCircle className="h-5 w-5 text-blue-600 mr-3 mt-0.5" />
            <div>
              <h3 className="text-sm font-medium text-blue-900 mb-1">How to Compare Projects</h3>
              <p className="text-sm text-blue-700">
                Select at least 2 projects from the grid above to start comparing their sustainability metrics, 
                resource usage, and performance scores. You can compare up to 5 projects simultaneously.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompareProjects;